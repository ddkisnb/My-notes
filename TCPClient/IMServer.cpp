#include<iostream>
#include"CKernel.h"
#include<Windows.h>

using namespace std;

int main() {
	CKernel kernel;
	//打开服务器
	if (!kernel.startServer()) {
		cout << "打开服务器失败" << endl;
		return 1;
	}

	while (true) {
		Sleep(50000);
		cout << "server is running" << endl;
	}
	return 0;
}

//IM系统功能：注册（手机号、密码、昵称）、登录（手机号、密码）、聊天、添加好友（只支持通过昵称添加好友）、下线
//
//C++面向对象编程
//
//客户端：QT
//UI类
//
//核心处理类（处理接收到的数据，组织要发送的数据）
//
//中介者类（为了以后扩展）
//
//网络类（初始化网络，发送数据，接收数据，关闭网络）
//
//服务端：VS
//mysql类
//
//核心处理类（处理接收到的数据，组织要发送的数据）
//
//中介者类（为了以后扩展）
//
//网络类（初始化网络，发送数据，接收数据，关闭网络）
//
//网络类（TCP和UDP），多态
//
//父类INet（纯虚）（初始化网络，发送数据，接收数据，关闭网络）
//
//Udp子类（初始化网络（加载库，创建套接字，绑定ip和端口），发送数据，接收数据，关闭网络）
//
//TcpClient子类（初始化网络（加载库，创建套接字，连接服务器），发送数据，接收数据，关闭网络）
//
//TcpServer子类（初始化网络（加载库，创建套接字，绑定ip和端口，监听，接受连接），发送数据，接收数据，关闭网络）

//创建数据库和表
//用户信息表：用户id、手机号、密码、昵称、签名、头像id（只支持系统自带的头像图片）
//好友关系表：idA,idB（好友关系双向存储）

//总结：
//一、现在存在的问题
//1、一个账号可以同时登陆多个客户端，但是只有最后一个登录的客户端能收到数据，登陆的时候判断这个用户是否在线
//2、客户端异常下线的时候，服务端不知道，使用心跳机制
//3、手机号真实性校验，验证码
//4、服务器在windows系统下，使用io阻塞多线程模型，操作系统会给每个进程分配4G的虚拟内存
//其中0-2G是用户空间，2-4G是内核空间，每个线程使用IM堆栈大小，2G的用户空间最多可以创建2千多个线程
//实际服务端只能创建2千个左右的线程，一个客户端需要一个接收数据的线程
//所以服务器最多可以同时允许2千个客户端在线--epoll线程池模型解决

//二、扩展
//1、发送文件、发自定义表情包
//2、视频会议、音视频聊天
//3、朋友圈
//4、对战游戏
//5、新闻推送（四阶段学完爬虫）
//6、群聊